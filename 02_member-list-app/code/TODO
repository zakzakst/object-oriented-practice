Archive:
  ✘ フォームのバリデーション作成 @cancelled(20-10-06 05:59) @project(TODO)
  ✔ mixinsにまとめるスクリプトあるか検討 @done(20-10-06 06:38) @project(最後に対応)
  ✔ 最後にVScodeまわりの修正あれば「00」のほうにコピーしておく @done(20-10-06 06:38) @project(最後に対応)
  ✔ コンポーネントスタイル作成 @done(20-10-06 04:03) @project(TODO)
  ✔ ページのスタイル作成 @done(20-10-06 04:03) @project(TODO)
  ✔ mapMutation非推奨, mapActions推奨 @done(20-10-06 02:35) @project(調べる・読む)
  ✔ mapState非推奨, mapGetters推奨 @done(20-10-06 02:35) @project(調べる・読む)
  ✔ https://qiita.com/HayatoKamono/items/5958d8648007adf6881b @done(20-10-06 02:35) @project(調べる・読む)
  ✔ https://aloerina01.github.io/blog/2018-12-25-1 @done(20-10-06 02:35) @project(調べる・読む)
  ✔ プラグインを用いてlocalstrageに保存（https://github.com/robinvdvleuten/vuex-persistedstate） @done(20-10-06 02:35) @project(調べる・読む)
  ✔ https://qiita.com/syuji-higa/items/477b7ddc9cd946f5f28f @done(20-10-06 02:35) @project(調べる・読む)
  ✔ ページトランジションの設定 @done(20-10-05 01:07) @project(TODO)
  ✔ トースト表示 @done(20-10-05 00:44) @project(TODO)
  ✔ createとeditの実行の時にも「入力内容が消える」メッセージが表示されてしまう→実行後のページ遷移にクエリを持たせて条件分岐させる @done(20-10-05 01:33) @project(TODO)
  ✔ layoutを変更するタイプのページ遷移の場合トースト表示のCSSトランジションが効かない→今回は0.1秒後に実行タイミングをずらすことで対応 @done(20-10-05 00:51) @project(TODO)
  ✔ チームデータが削除された時に、元々そのチームに所属していた社員データの表示が上手くいかなくなる @done(20-10-05 01:08) @project(TODO)
  ✔ 各種リダイレクト @done(20-10-04 21:58) @project(TODO)
  ✔ ローディングアニメーション @done(20-10-04 20:57) @project(TODO)
  ✔ ページ削除の確認 @done(20-10-04 21:04) @project(TODO)
  ✔ 404ページ @done(20-10-04 20:25) @project(TODO)
  ✔ フォーム画面から離れる場合のアラート（ナビゲーションガード） @done(20-10-04 20:57) @project(TODO)
  ✔ 社員データの処理 @done(20-10-04 20:03) @project(TODO)
  ✘ 登録データがない場合の表示（違うIDでアクセスしたさいの表示も余裕あったら考えたい） @cancelled(20-10-04 20:10) @project(TODO)
  ✘ 追々「最初は○件のデータを読み込む」的なこともやりたい @cancelled(20-10-04 20:08) @project(TODO)
  ✘ 直接チームシングルページにアクセスした時にチームデータがロードされていないので、内容が表示されない→今回は最初の読込時に「/team」にリダイレクトさせる対応 @cancelled(20-10-04 20:09) @project(TODO)
  ✘ チームや社員の順番をコントロールするデータを持たせたほうがいいか @cancelled(20-10-04 20:09) @project(TODO)
  ✘ エラー時の表示 @cancelled(20-10-04 20:09) @project(TODO)
  ✔ チームデータの読み込み完了タイミングと社員データの読込タイミングの兼ね合い（ちょっと今回は妥協パターンになりそう）→今回はstoreの参照でなく対応（チームデータのstoreに更新があっても社員データのほうには反映されない。※再読み込みが必要） @done(20-10-04 18:54) @project(TODO)
  ✔ NuxtのasyncData（https://ja.nuxtjs.org/guide/async-data/）→サーバー側の処理っぽいので、一旦スルー（https://reffect.co.jp/vue/nuxt-js-axios-asyncdata） @done(20-10-04 18:52) @project(調べる・読む)
  ✔ propsdown eventup推奨 @done(20-10-04 18:53) @project(調べる・読む)
  ✔ firebaseの設定 @done(20-10-04 08:35) @project(TODO)
  ✔ ログイン認証 @done(20-10-03 19:36) @project(TODO)
  ✔ チームデータの処理 @done(20-10-04 08:35) @project(TODO)
  ✔ 戻るボタン（https://router.vuejs.org/ja/guide/essentials/navigation.html） @done(20-10-03 15:45) @project(調べる・読む)
  ✔ 各種ページの作成 @done(20-10-03 15:39) @project(TODO)
  ✘ 前のページに戻るボタン、最初のページだったら（そもそも戻るページがないから）表示しない設定 @cancelled(20-10-03 15:33) @project(TODO)
  ✘ teamIcon.iconの変更に対応して画像が切り替わらない @cancelled(20-10-03 15:31) @project(TODO)
  ✔ $emit使うチャンスがあったら使いたい @done(20-10-03 11:23) @project(TODO)
  ✔ ボタンコンポーネントの作成 @done(20-10-03 11:29) @project(TODO)
  ✔ グローバルナビゲーションの作成 @done(20-10-03 12:05) @project(TODO)
  ✔ 編集用コンポーネント作成 @done(20-10-03 09:01) @project(TODO)
  ✔ 新規追加用コンポーネント作成 @done(20-10-03 09:01) @project(TODO)
  ✔ https://kic-yuuki.hatenablog.com/entry/2019/01/05/144610 @done(20-10-03 08:13) @project(調べる・読む)
  ✔ https://scrapbox.io/gyarasu/%5BVue%5D_Store%E3%81%AEstate%E3%82%92%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%ABstate%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B @done(20-10-03 08:12) @project(調べる・読む)
  ✔ チームコンポーネントベース作成 @done(20-10-02 07:35) @project(TODO)
  ✔ 社員コンポーネントベース作成 @done(20-10-02 07:35) @project(TODO)
  ✔ コレクションビューのフィルターをどうするか（メンバーの全体とチームでフィルターかけたパターン）→propsにチームフィルタを設定して対応してみる（デフォルトは全体表示） @done(20-10-02 07:30) @project(TODO)
  ✘ メンバーとチームの対応関係が必要な時の処理手順考える @cancelled(20-10-02 04:23) @project(TODO)
  ✔ コンポーネント・STATEを計画する @done(20-10-01 04:30) @project(TODO)
  ✔ リダイレクトを計画する @done(20-10-01 04:30) @project(TODO)
  ✔ https://namu-r21.hatenablog.com/entry/2018/03/21/232726 @done(20-09-29 10:29) @project(調べる・読む)
  ✔ https://aloerina01.github.io/blog/2019-09-25-1 @done(20-09-29 10:50) @project(調べる・読む)
  ✔ https://medium.com/studist-dev/ddd-vuex-c47055f6c1ba @done(20-09-29 13:05) @project(調べる・読む)
  ✔ https://tech.smartshopping.co.jp/nuxt_bff @done(20-09-29 13:06) @project(調べる・読む)
  ✔ https://qiita.com/kudo_kk/items/d8cfff0f9fefe62da356 @done(20-09-29 13:23) @project(調べる・読む)
  ✔ https://qiita.com/kahirokunn/items/6b4834b9a13406535f32 @done(20-10-01 03:49) @project(調べる・読む)
  ✔ ドメイン駆動設計 @done(20-10-01 03:49) @project(調べる・読む)
  ✔ https://qiita.com/eKushida/items/39bdb3f88fb68ecd66f6 @done(20-10-01 03:51) @project(調べる・読む)

Memo:
  ■■■ 反省など ■■■
  ・「メンバーとチームの対応関係」のやり方ちょっとこんがらがりそうなので、次回の課題にする（一旦今回は、データ読み込み時にデータ照合する対応、データ編集した時に更新とかややこしそうだがスルー）

  ・コレクションビューのフィルターをpropsで対応してみたの上手くいったと思う（他の方法も勉強する）

  ・「JSON.parse(JSON.stringify(object))」でディープコピーを作れるの覚えとく

  ・propsで渡した値を子コンポーネント側のv-modelで変更しようとするとエラーがでた。（親コンポーネントの値を子コンポーネントから変更しようとするのがよくない）

  ・「teamIcon.iconの変更に対応して画像が切り替わらない」は次回の課題。リアクティブデータに関する理解が多分たりない。

  ・「前のページに戻るボタン、最初のページだったら表示しない」は次回の課題。ちょっと調べたが出てこなかった。

  ・gettersでfindやfilterした値を返す時、対応するデータがなかった場合に返すデフォルトの値を設定しておいたほうがいいと思った。

  ・v-modelのチェックボックスでfalseの時に値が空で送信されてしまっていた。（リアクティブデータの理解やっぱ不足してる）

  ・FAアイコンにクラス「fa-spin」をつけると回転する

  ・envの「APP_DIR」は「/（スラッシュ）」つけて登録したほうがよかったかもしれない

  ・次回対応
  チームや社員の順番をコントロールするデータ
  最初は○件のデータを読み込む
  直接シングルページにアクセスした時のデータ読込
  エラー時の表示
  登録データがない場合の表示
  関連データが削除された場合の表示
  チームごとの色（テーマカラー）設定（※設定したある色の配列から自動で選ばれる）
  プラグインを用いてlocalstrageに保存（https://github.com/robinvdvleuten/vuex-persistedstate）
  watchプロパティーのimmediate: true
  VueのerrorCapturedフック
  フォームのバリデーション作成（vee-validateと「input type=text」のコンポーネントをバリデーション含めて作って、複数配置）
  ビルドの容量制限の回避
  envの「APP_DIR」（firebaseのルートと分ける）

  ■■■ 参考 ■■■
  ・componentやstoreの設計方法
  https://techblog.roxx.co.jp/entry/2019/02/14/154002（「Presentational Component」「Container Component」）
  https://qiita.com/suzu-4/items/bc86be23aa4eedd4cfaa（「役割早見表」「アプリケーションにとって重要なStateであるならばStoreに持たせて、そうでないならComponentのローカルStateとして取り扱うといった使い分け」）
  https://namu-r21.hatenablog.com/entry/2018/03/21/232726（「MVCとMVVM,Fluxで大きく異なるのは,View側にサーバ(Model,Controller)とは独立したアプリケーションがあり,Viewで独立したデータ状態を持つ/制御することであろう」）
  https://aloerina01.github.io/blog/2019-09-25-1（「VuexのStoreはGetterを通じてStateの一部を切り出してViewに渡すことができます」「プロパティアクセスのGetterは返すデータを表す名詞で命名する」「メソッドアクセスのGetterはfind{名詞}やfind{名詞}By{条件}と命名し、引数に条件をとる」「Stateを加工したり組み合わせたりして表示に適した値に変換する処理は、原則Component側で担うようにしています。StoreからGetterで取得した値をComputedなどで変換して表示する」「StoreのGetterをViewに依存させないこと(Viewの仕様に引きずられないこと)を重視したい」）
  https://medium.com/studist-dev/ddd-vuex-c47055f6c1ba（「ドメインとなるデータをstoreに格納し、ドメインではないデータ、例えば画面由来の一時的なデータはコンポーネント側のローカルstateに格納します。」「ドメインとなるデータをstoreに格納し、ドメインではないデータ、例えば画面由来の一時的なデータはコンポーネント側のローカルstateに格納します。」「UI層の仕事はドメインの複雑さを解決することなどではありません。その名の通り、ユーザーとのインタフェースを築く豊かな表現に集中すべきです。つまりドメインの複雑さをUI層から分離・隔離し、UI層が本来の仕事に集中できる洗練されたモデルを提供する存在が必要です。その存在こそがstoreです。」）
  https://qiita.com/kudo_kk/items/d8cfff0f9fefe62da356（「mapState非推奨, mapGetters推奨」「mapMutation非推奨, mapActions推奨」「propsdown eventup推奨」）
  https://qiita.com/kahirokunn/items/6b4834b9a13406535f32（「他のcomponentがthis.$refs.hoge.getUsers()ってコードを書いて、そのメソッドを実行している可能性が完全になくなりましたね！」「dataの値が定数とかpropsから算出できる値なら、できるだけcomputedに移してあげましょう。なぜならsetterがないcomputed はread onlyだからです。read onlyは変更される心配がないためバグを減らしてくれるとても素晴らしいものです！」「template内でdataなどを直接変更したりイベントを発火したりするコードを直接書くことはよくありません。methodで定義すれば、メソッド名によって式の意図を簡単に伝えられる」「必須propsに必ずrequired: trueを付ける」「slotに渡されたアイテムの開閉だけを担当するコンポーネントと、専用のslotをいくつか用意したレイアウト用のコンポーネントを作成し、それをメインとなるコンポーネントで使ってはどうでしょうか。コードがとても見通しがよくなります。」）

  ・rootStateはmutations内では使えず、gettersとactionsの中でしか使えない。
  https://qiita.com/hisashi_matsui/items/7cd872186a2b16e37ae1

  ・404ページの実装
  https://qiita.com/yoshinbo/items/d149560c409503b07758

  ・ナビゲーションガードでリダイレクトさせようとしたけど上手くいかなかった件（next(/team)使って移動させようとしたら、「Cannot read property 'scrollToTop' of undefined」と出た）
  https://router.vuejs.org/ja/guide/advanced/navigation-guards.html
  https://qiita.com/yotahada-nus3/items/e9832cd1213e7bd185e5

  ・mapStateの使いどころ
  https://reffect.co.jp/vue/vue-js-vuex-map-helper（「$this.$store.stateまでは共通の文字列なので複数のコンポーネントでthis.$store.state.XXXXを記述したい場合に効率的ではありません。そのためVuexにはmapStateヘルパーという機能が準備されており、mapStateを使うことで短縮して記述することができます。」）

  ・process.envのディレクトリをルートパス、画像パスに利用する
  https://qiita.com/amishiro/items/9d7ca6b239f604a40424
